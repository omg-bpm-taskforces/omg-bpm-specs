<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:sce="https://www.omg.org/spec/SCE/20211108/MODEL" 
	targetNamespace="https://www.omg.org/spec/SCE/20211108/MODEL" 
	elementFormDefault="qualified">

	<xsd:element name="SCEPackage" type="sce:tSCEPackage">
		<xsd:annotation>
			<xsd:documentation>
				SCEPackage is a basic capability that is used by the other packaging classes in SCE. Thus, by itself it is not 
				contained within any element. It’s five sub-classes (listed in the next five sections), will be used to organize 
				the types of content that make up a model or set of models (of a language that utilizes SCE). The SCEModelPackage 
				is the top-level package used for distribution of the content of a modeling language.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCEPackage">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:sequence>
					<xsd:element name="adornmentInstance" type="sce:tAdornmentInstance" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the AdornmentInstances contained within a concrete specialization of SCEPackage.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="element" type="sce:tSCERootElement" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the SCERootElements contained within a SCEModelPackage. Many elements will be identified 
								through additional associations that subset this property.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="containedPackage" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the sub-packages for SCEPackage (which are SCERootElements that show up through the "element"
								element). This provides the capability for all specializations of SCEPackage to include sub-packages.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="extension" type="sce:tExtension" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This attribute identifies Extensions beyond the attributes and model associations in a concrete specialization of 
								SCEPackage.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="import" type="sce:tImport" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This attribute is used to import externally defined elements and make them available for use by elements within a 
								concrete specialization of SCEPackage.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>					
				</xsd:sequence>
				<xsd:attribute name="exporter" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							This attribute identifies the tool that is exporting the model file that is dependent on SCE.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="exporterVersion" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							This attribute identifies the version of the tool that is exporting the file that is dependent on SCE.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="tag" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							The tag setting provides another classification mechanism for the SCEPackage. This classification could be 
							used as part of a search for a particular model that is a concrete specialization of SCEPackage, for example.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="targetNamespace" type="xsd:anyURI" use="required">
					<xsd:annotation>
						<xsd:documentation>
							This attribute identifies the namespace associated with a concrete specialization of SCEPackage and will 
							follow the convention established by XML Schema.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="version" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							This attribute specifies the version of the model package that is dependent on SCE.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="versionDate" type="xsd:dateTime" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							The date when the version of the model package that is dependent on SCE was established.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="SCEModel" type="sce:tSCEModel" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				The SCEModel is the package that contains most of the SCE semantic elements (including model types and instances) 
				and is separate from any diagram information regarding the semantic elements. The SCEModel and the SCEDI are combined 
				at the top-level SCEModelPackage. It is an abstract element; thus, SCE cannot be implemented by itself to create a 
				modeling package. An implementation of another modeling specification that is dependent on SCE is required to 
				produce a concreate modeling package.			
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCEModel">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEPackage">
				<xsd:sequence>
					<xsd:element name="category" type="sce:tCategory" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the Categories contained within a concrete specialization of SCEModel.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="definitions" type="sce:tSCEDefinitions" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the SCEDefinitions sub-packages contained within a SCEModel. This is a subset of the 
								containedPackage association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="externalRelationship" type="sce:tExternalRelationship" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the external relationships contained within a concrete specialization of SCEModel.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="instances" type="sce:tSCEInstances" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the SCEInstances sub-packages contained within a SCEModel. This is a subset of the 
								containedPackage association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="profile" type="sce:tSCEProfile" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the SCEProfile sub-packages contained within a SCEModel. This is a subset of the 
								containedPackage association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="vocabulary" type="sce:tSCEVocabulary" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of terms (semantic references) that are part of a concrete specialization of SCEModel.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="SCEDefinitions" type="sce:tSCEDefinitions" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				The SCEDefinitions element is the package that, when specialized by a downstream language, will contain the “modeling” elements of that language. 
				The SCEDefinitions element inherits the attributes of SCEPackage. It is an abstract element; thus, SCE cannot be implemented by itself to 
				create a modeling package. An implementation of another modeling specification that is dependent on SCE is required to produce a concreate modeling package.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCEDefinitions">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEPackage">
				<xsd:sequence>
					<xsd:element name="containedDefinitions" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the sub-package SCEDefinitions. This provides the capability for all 
								specializations of SCEDefinitions to include sub-packages. This is a subset of the containedPackage 
								association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="elementType" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the ElementTypes contained within a SCEDefinitions. This is a subset of the 
								element association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="elementTypeRelationship" type="sce:tElementRelationshipType" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the ElementTypeRelationships contained within a concrete specialization of 
								SCEDefinitions. This is a subset of the element association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="modelArtifact" type="sce:tModelArtifact" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the ModelArtifacts contained within a concrete specialization of SCEDefinitions. 
								These will usually be contained in an SCEDefinitions that is sub-package to the top-level SCEDefinitions. 
								This is a subset of the element association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="SCEInstances" type="sce:tSCEInstances" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				The SCEInstances element is the package that, when specialized by a downstream language, will contain the specification of the 
				instances of the “modeling” elements of that language. This provides the capability to interchange these instances. The SCEInstances 
				element inherits the attributes of SCEPackage (see table above). It is an abstract element; thus, SCE cannot be implemented by itself 
				to create a modeling package. An implementation of another modeling specification that is dependent on SCE is required to 
				produce a concreate modeling package.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCEInstances">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEPackage">
				<xsd:sequence>
					<xsd:element name="containedInstances" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the sub-package SCEInstances. This provides the capability for all 
								specializations of SCEInstances to include sub-packages. This is a subset of the containedPackage 
								association of the SCEPackage element.							
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="elementRelationship" type="sce:tElementRelationship" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the ElementRelationships contained within a concrete specialization of 
								SCEInstances. This is a subset of the element association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="modelArtifact" type="sce:tModelArtifact" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This is a list of all the ModelArtifacts contained within a concrete specialization of SCEDefinitions. 
								These will usually be contained in an SCEDefinitions that is sub-package to the top-level SCEDefinitions. 
								This is a subset of the element association of the SCEPackage element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="SCEProfile" type="sce:tSCEProfile" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				A kind of SCEPackage that comprises SCE profiles that can be applied to other SCE elements.  SCEProfiles provide a mechanism 
				to exchange profile libraries. The SCEProfile element inherits the attributes of SCEPackage (see table above). It is an abstract 
				element; thus, SCE cannot be implemented by itself to create a modeling package. An implementation of another modeling specification 
				that is dependent on SCE is required to produce a concreate modeling package.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCEProfile">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEPackage"/>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="ModelArtifact" type="sce:tModelArtifact" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				A ModelArtifact is an object that provides supporting information about a model. However, it does not have any behavioral semantics. 
				The ModelArtifact element is an abstract element that inherits the attributes of SCEElement. ModelArtifacts are contained within a 
				model type that is defined by a modeling language that extends SCEModel. This will usually be a concrete specialization of a 
				sub-package SCEDefinitions or a sub-package SCEInstances. At this point, SCE provides three standard Artifacts: Associations, Groups, 
				and Text Annotations. Additional Artifacts MAY be added to the SCE specification in later versions. A modeler or modeling tool MAY 
				extend a diagram and add new types of ModelArtifacts. Any new ModelArtifacts MUST follow the connector connection rules defined in 
				the modeling specification that is dependent on SCE. Associations can be used to link ModelArtifacts to diagram elements and other ModelArtifacts.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tModelArtifact">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Association" type="sce:tAssociation" substitutionGroup="sce:ModelArtifact">
		<xsd:annotation>
			<xsd:documentation>
				An Association is used to associate ModelArtifacts (often Text Annotations) to other diagram elements. If a ModelArtifact extension, 
				such as an image, is added to the model, then that new ModelArtifact can be connected by an Association. A modeler can set the direct 
				of the association such that the connector line will have an arrowhead on either one end or both. The presence of one or two arrowheads 
				does not have any specific semantic meaning but may provide a visual queue about the nature of the association.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAssociation">
		<xsd:complexContent>
			<xsd:extension base="sce:tModelArtifact">
				<xsd:sequence>
					<xsd:element name="sourceRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The SCEElement that the Association is connecting from.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="targetRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The SCEElement that the Association is connecting to.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="associationDirection" type="sce:tAssociationDirection" use="required">
					<xsd:annotation>
						<xsd:documentation>
							AssociationDirection is an attribute that defines whether or not the Association shows any directionality with 
							an arrowhead. The default is “none” (no arrowhead). A value of “one” means that the arrowhead SHALL be at the 
							Target Object. A value of “both” means that there SHALL be an arrowhead at both ends of the Association line.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tAssociationDirection">
		<xsd:annotation>
			<xsd:documentation>
			    AssociationDirection is an enumerated list that defines the options regarding whether or not an Association shows any directionality 
			    with an arrowhead. The default is “none” (no arrowhead). A value of “one” means that the arrowhead SHALL be at the Target Object. A 
			    value of “both” means that there SHALL be an arrowhead at both ends of the Association line.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="one"/>
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="both"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="Group" type="sce:tGroup" substitutionGroup="sce:ModelArtifact">
		<xsd:annotation>
			<xsd:documentation>
				The Group object is a ModelArtifact that provides a visual mechanism to informally group elements of a diagram. Groups are often 
				used to highlight certain sections of a diagram without adding additional constraints or semantics. The highlighted (grouped) 
				section of the diagram can be separated for reporting and analysis purposes.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tGroup">
		<xsd:complexContent>
			<xsd:extension base="sce:tModelArtifact"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="TextAnnotation" type="sce:tTextAnnotation" substitutionGroup="sce:ModelArtifact">
		<xsd:annotation>
			<xsd:documentation>
				Text Annotations are a mechanism for a modeler to provide additional information for the reader of a SDMN Model.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tTextAnnotation">
		<xsd:complexContent>
			<xsd:extension base="sce:tModelArtifact">
				<xsd:sequence>
					<xsd:element name="annotatedElement" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								If the TextAnnotation is associated with (is the source of an Association) another diagram element, this association will 
								identify the target of the Association. It is derived from the connected Association element.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="commentRef" type="sce:tDocumentation" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								Comment is one of two attributes that provides text that the modeler wishes to communicate to the reader of the diagram. 
								The text within a comment references a Documentation element that is contained in SCEPackage. Thus, a particular comment 
								may appear on multiple diagrams. This attribute is optional, but if it used, then the note attribute SHALL NOT be used.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="language" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The named language can be a natural language, in which case the body is an informal representation, or an artifical language, 
							in which case the body is expected to be a formal, machine-parsable representation. If the note attribute is used, 
							then the language attribute is required.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="note" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Note is one of two attributes that provides text that the modeler wishes to communicate to the reader of the diagram. 
							The text within a note is contained in and specific to the diagram where the TextAnnotation is placed. This attribute is optional, 
							but if it used, then the comment attribute SHALL NOT be used.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<xsd:element name="SCERootElement" type="sce:tSCERootElement" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				SCERootElement is the abstract super class for most SCE elements. Basically, it is the root element of the SCE metamodel. 
				All of the elements within SCE, and any specification that is dependent on SCE, will inherit the attributes of SCERootElement. 
				It provides the basic attributes for id and name.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCERootElement">
		<xsd:attribute name="aliasID" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Various alternative identifiers for this Element. Generally, these will be set by tools, but one of them (the humanId), in particular, 
					may be set by the modeler.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="humanID" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					An identifier for this Element that is set by the modeler. It is the responsibility of the modeler to maintain the uniqueness of 
					this identifier within a model or relative to some other context.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="id" type="xsd:ID" use="required">
			<xsd:annotation>
				<xsd:documentation>
					This attribute is used to uniquely identify a SCEElement. The id is REQUIRED if this element is referenced or intended to be 
					referenced by something else. If the element is not currently referenced and is never intended to be referenced, the id MAY be omitted.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					The name attribute is a text description or label of the element. In general, the name is optional, but many elements will require a name. 
					The definition of each specialization of SCEElement will identify this requirement.					
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:element name="SCEElement" type="sce:tSCEElement" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				SCEElement extends SCERootElement with a set of common associations, such as documentation, that are useful for
				most elements of a modeling language. Most of the elements within SCE, and any specification that is dependent on SCE, 
				will inherit the attributes and associations of SCEElement.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCEElement">
		<xsd:complexContent>			
			<xsd:extension base="sce:tSCERootElement">
				<xsd:sequence>
					<xsd:element name="attachment" type="sce:tAttachment" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association is used to annotate any concrete specialization of SCEElement with one or more attachments.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="categoryRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association is used to categorize any concrete specialization of SCEElement. A Category has user-defined semantics, which 
								can be used for documentation or analysis purposes.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="documentation" type="sce:tDocumentation" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association is used to annotate any concrete specialization of SCEElement with descriptions and other documentation.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="extensionDefinitionRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association is used to attach additional attributes and associations to any concrete specialization of SCEElement – 
								i.e., provide an extension. This association is not applicable when the XML schema interchange is used, since the XSD 
								mechanisms for supporting anyAttribute and any element already satisfy this requirement.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="extensionValue" type="sce:tExtensionAttributeValue" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association is used to provide values for extended attributes and model associations. This association is not applicable 
								when the XML schema interchange is used, since the XSD mechanisms for supporting anyAttribute and any element already satisfy 
								this requirement.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="semanticReferenceRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								A concrete SCEElement can reference multiple SemanticReference elements.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="ElementType" type="sce:tElementType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				A kind of SCEElement that is the type or specification of a TypedElement.
			</xsd:documentation>
		</xsd:annotation>		
	</xsd:element>
	<xsd:complexType name="tElementType">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="TypedElement" type="sce:tTypedElement" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				A kind of SCEElement that has zero or more ElementTypes, identified by the typeRef attribute.  
				The ElementType(s), if present, provide a specification for the element. 
			</xsd:documentation>
		</xsd:annotation>		
	</xsd:element>
	<xsd:complexType name="tTypedElement">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:sequence>
					<xsd:element name="typeRef" type="sce:tElementType" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								The class(es) that provide(s) a specification of the SCEElement. This usually is applied to the concrete 
								SCEElement that serves as an instance in a runtime model.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="Annotation" type="sce:tAnnotation" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				The Annotation element is an abstract element that is used to organize a set of elements that are used to annotate any 
				concrete specialization of SCEElement. The containment of Annotations depends on the specific type of Annotation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAnnotation">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Import" type="sce:tImport">
		<xsd:annotation>
			<xsd:documentation>
				The Import class is used by an implementation of a modeling specification (i.e., a model), dependent on SCE, when referencing an 
				external element that is contained in a different model. The referenced model can be of the same or different type of modeling 
				specification. For example, one SDMN model may import the Data Items from another SDMN model.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tImport">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCERootElement">
				<xsd:attribute name="importType" type="xsd:anyURI" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Identifies the type of document being imported by providing an absolute URI that identifies the encoding language used in the 
							document. The value of the importType attribute MUST be set to http://www.w3.org/2001/XMLSchema when importing XML Schema 1.0 
							documents, to http://www.w3.org/TR/wsdl20/ when importing WSDL 2.0 documents, and http://www.omg.org/spec/BPMN/20100524/MODEL 
							when importing BPMN 2.0 documents. Other types of documents MAY be supported. Importing Xml Schema 1.0, WSDL 2.0 and BPMN 2.0, 
							CBMN 1.0, CMMN 1.1, DMN 1.3, and SDMN 1.0 types MUST be supported. Identifies the type of document being imported by providing 
							an absolute URI that identifies the encoding language used in the document. The value of the importType attribute MUST be set 
							to http://www.w3.org/2001/XMLSchema when importing XML Schema 1.0 documents, to http://www.w3.org/TR/wsdl20/ when importing 
							WSDL 2.0 documents, and http://www.omg.org/spec/BPMN/20100524/MODEL when importing BPMN 2.0 documents. Other types of documents 
							MAY be supported. Importing Xml Schema 1.0, WSDL 2.0 and BPMN 2.0, CBMN 1.0, CMMN 1.1, DMN 1.3, and SDMN 1.0 types MUST be supported. 
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="location" type="xsd:anyURI" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Identifies the location of the imported element within the document identified by the importType.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="namespace" type="xsd:anyURI" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Identifies the namespace of the imported element.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>				
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="Attachment" type="sce:tAttachment" substitutionGroup="sce:Annotation">
		<xsd:annotation>
			<xsd:documentation>
				The Attachment element provides a place for model developers to provide attached documents to a model element.
				The Attachment element is contained within a concrete specialization of SCEElement. Thus, any concrete element within a model 
				that is dependent on SCE MAY have one or more Attachments.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAttachment">
		<xsd:complexContent>
			<xsd:extension base="sce:tAnnotation">
				<xsd:attribute name="attachmentLocation" type="xsd:anyURI" use="required">
					<xsd:annotation>
						<xsd:documentation>
							This attribute identifies the URI location of the attachment.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Category" type="sce:tCategory">
		<xsd:annotation>
			<xsd:documentation>
				A Category, which have user-defined semantics, can be used for documentation or metadata organizational purposes. For example, 
				recommendations (in the healthcare domain) can be assignesoud a category of “Lifestyle Modification” with further breakdowns into 
				“Weight Reduction,” “Exercise Program,” and “Diet Modification” sub-categories.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tCategory">
		<xsd:complexContent>
			<xsd:extension base="sce:tAnnotation">
				<xsd:sequence>
					<xsd:element name="parentRef" type="xsd:QName" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								This association allows the nesting of Categories. A Category MAY be a parent for more than one Category.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="child" type="sce:tCategory" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association allows the nesting of Categories. A Category MAY have more than one child Category.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Documentation" type="sce:tDocumentation" substitutionGroup="sce:Annotation">
		<xsd:annotation>
			<xsd:documentation>
					The Documentation element provides a place for model developers to provide descriptive information about a model element.
				</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tDocumentation">
		<xsd:complexContent>
			<xsd:extension base="sce:tAnnotation">
				<xsd:attribute name="language" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The named language can be a natural language, in which case the body is an informal representation, or an artifical language, 
							in which case the body is expected to be a formal, machine-parsable representation.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="body" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute is used to capture the text descriptions of any concrete element within a model that is dependent on SCE.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="SemanticReference" type="sce:tSemanticReference">
		<xsd:annotation>
			<xsd:documentation>
				Most BPM+ models (dependent on SCE) are not intended to define full-scale ontologies or domain models, such as data models. 
				However, the activities, decisions, data items, etc. of BPM+ are representative of elements defined by ontologies or data models. 
				The specific context of the BPM+ elements may result in different terminology or sub-sets of data representation elements within 
				the normative domain models. To reduce any confusion due to terminology or data representation, the BPM+ models dependent on SCE 
				have the capability of linking model elements to the appropriate external sources of truth for their domain. The SemanticReference 
				is that mechanism in SCE.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSemanticReference">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:attribute name="conceptURI" type="xsd:anyURI" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute defines the URI location of the target of the SemanticReference.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="conceptNamespace" type="xsd:anyURI" use="optional">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute documents the version of the target of the SemanticReference when the SemanticReference was included in the 
						    model. If this information is not provided, then it is likely that the conceptURI will navigate to the current version of 
						    the target of the SemanticReference, which could have changed since the SemanticReference was established in the model.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="ElementRelationship" type="sce:tElementRelationship">
		<xsd:annotation>
			<xsd:documentation>
				A kind of relationships between two SCEElements. The RelationshipType enumeration element identify specific types of relationships.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tElementRelationship">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:sequence>
					<xsd:element name="sourceRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The source SCEElement of the relationship. If there is an ElementRelationshipType identified 
								through the typeRef association, then the source must be a TypedElement. 
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="targetRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The target concrete specialization of SCEElement of the relationship. If there is an ElementRelationshipType identified 
								through the typeRef association, then the target must be a TypedElement.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="typeRef" type="sce:tElementRelationshipType" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								the type shoulde be tElementTypeRelation
								The target concrete specialization of SCEElement of the relationship.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="relationshipKindRef" type="sce:tRelationshipKind" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								A description of the type of the relationship. See the RelationshipType enumeration, below, for more details.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="ElementRelationshipType" type="sce:tElementRelationshipType">
		<xsd:annotation>
			<xsd:documentation>
				A kind of ElementRelationship that specifies two ElementTypes (rather than SCEElements). The RelationshipType enumeration 
				element identify specific types of relationships.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tElementRelationshipType">
		<xsd:complexContent>
			<xsd:extension base="sce:tElementType">
				<xsd:sequence>
					<xsd:element name="sourceRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The source ElementType of the relationship. 
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="targetRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The one or more target ElementTypes of the relationship.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="relationshipKindRef" type="sce:tRelationshipKind" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								A description of the type of the relationship. See the RelationshipType enumeration, below, for more details.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="sourceMultiplicity" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							This attribute defines the minimum number of target SCEElements that may be the source for the ElementRelationship 
							that identifies this ElementRelationshipType source its typeRef association.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="targetMultiplicity" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							This attribute defines the minimum number of target SCEElements that may be the source for the ElementRelationship 
							that identifies this ElementRelationshipType through its typeRef association.
							</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="RelationshipKind" type="sce:tRelationshipKind"/>	
	<xsd:complexType name="tRelationshipKind">
		<xsd:complexContent>
			<xsd:extension base="sce:tSemanticReference"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Extension" type="sce:tExtension">
		<xsd:annotation>
			<xsd:documentation>
				The Extension element binds/imports an ExtensionDefinition and its attributes to a model definition.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tExtension">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCERootElement">
				<xsd:sequence>
					<xsd:element name="definition" type="sce:tExtensionDefinition" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								This flag defines if the semantics defined by the extension definition and its attribute definition MUST be understood by 
								the model adopter in order to process the model correctly. Defaults to False.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="mustUnderstand" type="xsd:boolean" use="optional" default="false">
					<xsd:annotation>
						<xsd:documentation>
							Defines the content of the extension. Note that in the XML schema, this definition is provided by an external XML schema file 
							and is simply referenced by QName.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentAttributeDefinition" type="sce:tAdornmentAttributeDefinition">
		<xsd:annotation>
			<xsd:documentation>
				A member of a AdornmentProfile that describes an attribute that is applicable to specific SCEElements.  The 
				AdornmentAttributeDefinition has an AttributeType which in turn specifies the PrimativeAttributeType of the definition.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<xsd:complexType name="tAdornmentAttributeDefinition">
		<xsd:complexContent>
			<xsd:extension base="sce:tExtensionAttributeDefinition">
				<xsd:sequence>
					<xsd:element name="attributeTypeRef" type="xsd:QName" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The type of the AdornmentAttributeDefinition.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="chronicled" type="xsd:boolean" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    When chronicled and updateable = "True" , a new AdornmentValue of the same AdornmentAttributeDefinition may be 
						    created for the element.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="profileAttributeName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    The name of the AdornmentAttributeDefinition.  The name must be unique for any given adorned type in a AdornmentProfile. 
						    However, there may be multiple AdornmentDefinitions with the same name if they will be applied to different SCEElements.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="removeable" type="xsd:boolean" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    If the elements AdornmentValue conformant to this definition may be removed (deleted).
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="requiredAtCreation" type="xsd:boolean" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    If "True", the element must be provided an AdornedValue conformant to this definition at time of creation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="updateable" type="xsd:boolean" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    If "True", the element's AdornmentValue conformant to this definition may be updated. In the case that the value is not 
						    chronicled, the AdornmentValue may be changed with new dateSet, and party. In the case that the value is chronicled, a 
						    new AttributeValue of the same ProfileAttributeDefinition is created for the element.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentDefinition" type="sce:tAdornmentDefinition">
		<xsd:annotation>
			<xsd:documentation>
				A reference to one or more types to which one or more AdornmentAttributeDefinitions apply as part of a AdornmentProfile.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAdornmentDefinition">
		<xsd:complexContent>
			<xsd:extension base="sce:tExtensionDefinition">
				<xsd:sequence>
					<xsd:element name="attributeDefinitionRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
							    The specification for an AdormentValue that may be added to an adornedType.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="adornedTypeRef" type="xsd:QName" minOccurs="1" maxOccurs="1"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentInstance" type="sce:tAdornmentInstance">
		<xsd:annotation>
			<xsd:documentation>
				An element that has been adorned with one or more AdornmentValues through an AdornmentProfile.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAdornmentInstance">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:sequence>
					<xsd:element name="value" type="sce:tExtensionAttributeValue" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								A value that has been added to an adornedElement.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="adornedElementRef" type="xsd:QName" minOccurs="0" maxOccurs="1"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentProfile" type="sce:tAdornmentProfile">
		<xsd:annotation>
			<xsd:documentation>
				A profile of attribute definitions that may apply to one or more SCEElements under organizational, ad hoc, or de jure standards or 
				conventions.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAdornmentProfile">
		<xsd:complexContent>
			<xsd:extension base="sce:tExtensionDefinition">
				<xsd:sequence>
					<xsd:element name="adornableTypeRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								A set of AdornedElements that specify the SCEElements to which specific attribute types may be applied.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="attributeDefinitionRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
							    The specification for an AdornmentValue that may be added to an adornableType. AdornmentAttributeDefinitions 
							    referenced by this property of AdornmentProfile may be applied generally to any base element wherein the 
							    AdornmentProfile has been applied.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="version" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    The version of the AdornmentProfile.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentValue" type="sce:tAdornmentValue" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				A value of an attribute associated with an AdornedElement.  AdornmentValue is specialization of ExtensionAttributeValue where the 
				type of the value is specified by the attributeDefinition property.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAdornmentValue">
		<xsd:complexContent>
			<xsd:extension base="sce:tExtensionAttributeValue">
				<xsd:sequence>
					<xsd:element name="attributeDefinitionRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
							    The specification for the AdormentValue that has been added to an adornedType.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="dateSet" type="xsd:dateTime" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    The date/time that the value of the adornment was set.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AttributeType" type="sce:tAttributeType">
		<xsd:annotation>
			<xsd:documentation>
				The type of a AdornmentAttributeDefinition.  The type is specified by the PrimativeAttributeType enumeration.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tAttributeType">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:attribute name="type" type="sce:tPrimitiveAttributeKind" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    An enumeration that specifies the primitive type of the AdormentAttributeDefinition.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="DateTimeValue" type="sce:tDateTimeValue">
		<xsd:annotation>
			<xsd:documentation>
				An AdornmentValue that is a DateTime type.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tDateTimeValue">
		<xsd:complexContent>
			<xsd:extension base="sce:tAdornmentValue">
				<xsd:attribute name="attributeValue" type="xsd:dateTime" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    The date/time representing the value of the adornment.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="IntegerValue" type="sce:tIntegerValue">
		<xsd:annotation>
			<xsd:documentation>    
				An AdornmentValue that is an Integer type.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tIntegerValue">
		<xsd:complexContent>
			<xsd:extension base="sce:tAdornmentValue">
				<xsd:attribute name="attributeValue" type="xsd:integer" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    The integer representing the value of the adornment.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="StringValue" type="sce:tStringValue">
		<xsd:annotation>
			<xsd:documentation>
				An AdornmentValue that is a String type.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tStringValue">
		<xsd:complexContent>
			<xsd:extension base="sce:tAdornmentValue">
				<xsd:attribute name="attributeValue" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
						    The string representing the value of the adornment.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tPrimitiveAttributeKind">
		<xsd:annotation>
			<xsd:documentation>
			    The type of an attribute that may be added by a AdornmentAttributeDefinition to a SCEElement.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="dateTime"/>
			<xsd:enumeration value="integer"/>
			<xsd:enumeration value="string"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="ExtensionAttributeDefinition" type="sce:tExtensionAttributeDefinition">
		<xsd:annotation>
			<xsd:documentation>
				The ExtensionAttributeDefinition defines new attributes. This type is not applicable when the XML schema interchange is used; 
				since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this requirement. The 
				ExtensionAttributeDefinition element inherits the attributes of SCEElement. It is contained within an ExtensionDefinition element.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tExtensionAttributeDefinition">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:attribute name="type" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The type that is associated with the attribute.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="isReference" type="xsd:boolean" use="optional" default="false">
					<xsd:annotation>
						<xsd:documentation>
							Indicates if the attribute value will be referenced or contained.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="ExtensionAttributeValue" type="sce:tExtensionAttributeValue">
		<xsd:annotation>
			<xsd:documentation>
				The ExtensionAttributeDefinition defines new attributes. This type is not applicable when the XML schema interchange is used; 
				since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this requirement. 
				The ExtensionAttributeDefinition element inherits the attributes of SCEElement. It is contained within an ExtensionDefinition element.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tExtensionAttributeValue">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCERootElement">
				<xsd:sequence>
					<xsd:element name="extensionAttributeDefinitionRef" type="xsd:QName" minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								Defines the extension attribute for which this value is being provided.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="valueRef" type="xsd:anyURI" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The contained attribute value, used when the associated ExtensionAttributeDefinition.isReference is true. The type of this 
								Element MUST conform to the type specified in the associated ExtensionAttributeDefinition.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="value" type="xsd:anyURI" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								The contained attribute value, used when the associated ExtensionAttributeDefinition.isReference is false. The type of this 
								Element MUST conform to the type specified in the associated ExtensionAttributeDefinition.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="ExtensionDefinition" type="sce:tExtensionDefinition">
		<xsd:annotation>
			<xsd:documentation>
				The ExtensionDefinition class defines and groups additional attributes. This type is not applicable when the XML schema interchange is used, 
				since XSD Complex Types already satisfy this requirement. The ExtensionDefinition element inherits the attributes of SCEElement. 
				It is contained within an Extension element. The name is used as a namespace to uniquely identify the extension content.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tExtensionDefinition">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:sequence>
					<xsd:element name="extensionAttributeDefinition" type="sce:tExtensionAttributeDefinition" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
							    The specific attributes that make up the extension.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="ExternalRelationship" type="sce:tExternalRelationship"/>	
	<xsd:complexType name="tExternalRelationship">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEElement">
				<xsd:sequence>
					<xsd:element name="sourceRef" type="xsd:anyURI" minOccurs="1" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association defines artifacts that are augmented by the external relationship.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="targetRef" type="xsd:anyURI" minOccurs="1" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association defines artifacts used to extend the semantics of the source element(s).
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="type" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							A description of the type of the element.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="direction" type="sce:tRelationshipDirection" use="required">
					<xsd:annotation>
						<xsd:documentation>
							This attribute specifies the direction of the relationship.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="SCEVocabulary" type="sce:tSCEVocabulary">
		<xsd:annotation>
			<xsd:documentation>
				This is a list of terms (SemanticReferences) that can be used to define the meaning of elements of a concrete 
				specialization of SCEPackage. Multiple Vocabularies can be defined. They are contained in an SCEPackage. 
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="tSCEVocabulary">
		<xsd:complexContent>
			<xsd:extension base="sce:tSCEPackage">
				<xsd:sequence>
					<xsd:element name="term" type="sce:tSemanticReference" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								This association defines artifacts used to extend the semantics of the source element(s).
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tRelationshipDirection">
		<xsd:annotation>
			<xsd:documentation>
			    This enumeration list specifies the direction of the relationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="both">
				<xsd:annotation>
					<xsd:documentation>
						This literal specifies that the ExternalRelationship is in the direction from the target to the source and from the source to the target.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="backward">
				<xsd:annotation>
					<xsd:documentation>
						This literal specifies that the ExternalRelationship is in the direction from the target to the source.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="none">
				<xsd:annotation>
					<xsd:documentation>
						This literal specifies that the ExternalRelationship between the source and target is none.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="forward">
				<xsd:annotation>
					<xsd:documentation>
						This literal specifies that the ExternalRelationship is in the direction from the source to the target.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	

</xsd:schema>
