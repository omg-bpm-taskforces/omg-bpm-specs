<?xml version="1.0" encoding="UTF-8"?>
<xs:schema id="SCEDI" version="1.0"
    targetNamespace="https://www.omg.org/spec/SCE/SCEDI/"
    xmlns:scedi="https://www.omg.org/spec/SCE/SCEDI/"
    xmlns:di="https://www.omg.org/spec/SCE/DI/"
    xmlns:dc="https://www.omg.org/spec/SCE/DC/"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified" attributeFormDefault="unqualified">

  <!-- The documentation annotations in this file are non-normative.
      They are provided for convenience, but the specification text takes precedence. -->

  <xs:import namespace="https://www.omg.org/spec/SCE/DI/" schemaLocation="DI.xsd"/>
  <xs:import namespace="https://www.omg.org/spec/SCE/DC/" schemaLocation="DC.xsd"/>

  <xs:element name="diagrams" type="scedi:tDiagrams">
    <xs:annotation>
      <xs:documentation>
        The class Diagrams is a container for all the Diagram and the shared Style defined in a SCE-dependent modeling package.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="tDiagrams">
    <xs:sequence>
      <xs:element ref="scedi:diagram" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            A list of Diagram.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="scedi:style" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            A list of shared Style that can be referenced by all SCE-dependent diagrams and DiagramElement.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="di:extension" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="diagram" type="scedi:tDiagram">
    <xs:annotation>
      <xs:documentation>
        The class Diagram specializes DI::Diagram. It is a kind of DI::Diagram that represents a depiction of all or part of a SCE-dependent model.
        It is contained within the Diagrams element. The languages that are dependent on SCE MAY define specialized diagrams based on Diagram
        if they have to add new elements or attributes. By default they should use Diagram directly.
        Diagram is the container of DiagramElement (Shape(s) and Edge(s)). Diagram cannot include other Diagrams. A Diagram can
        define a Style locally and/or it can refer to a shared one defined in the Diagrams. Properties defined in the local style overrides
        the one in the referenced shared style. That combined style (shared and local) is the default style for all the DiagramElement contained
        in this Diagram. The Diagram class represents a two-dimensional surface with an origin of (0, 0) at the top left corner.
        This means that the x and y axes have increasing coordinates to the right and bottom. Only positive coordinates are allowed for diagram elements
        that are nested in a Diagram.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="tDiagram">
    <xs:complexContent>
      <xs:extension base="di:tDiagram">
        <xs:sequence>
          <xs:element name="Size" type="dc:tDimension" minOccurs="0" maxOccurs="1">
            <xs:annotation>
              <xs:documentation>
                The size of this diagram. If not specified, the the SCE-dependent diagram is unbounded.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="scedi:diagramElement" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>
                Element Role: diagramElement
                A list of DiagramElements (Shape and Edge) that are depicted in the
                SCE-dependent diagram. The diagram elements are ordered.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="modelElement" type="xs:QName" use="optional">
          <!-- This attribute is added to Diagram because the multiple
            inheritence of the UML metamodel is not supported in XSD.-->
          <xs:annotation>
            <xs:documentation>
              a reference to the Element represented by this Diagram.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="diagramElement" type="di:tDiagramElement" abstract="true">
    <xs:annotation>
      <xs:documentation>
        The DiagramElement class is contained by the Diagram and is the base class for Shape and Edge. DiagramElement inherits its styling
        from its parent Diagram. In addition, it can refer to one of the shared Style defined in the DI and/or it can define a local style. See
        section below for more details on styling. DiagramElement MAY also contain a Label when it has a visible text label. If no Label is defined,
        the DiagramElement should be depicted without a label.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <!-- An xs:complexType for DiagramElement is deliberately omitted from
    this XML schema due to the multiple-inheritance in the metamodel -->

  <xs:element name="shape" type="scedi:tShape" substitutionGroup="scedi:diagramElement"/>
  <xs:complexType name="tShape">
    <xs:annotation>
      <xs:documentation>
        The Shape class specializes DI::Shape and DiagramElement. It is a kind of DI::Shape that depicts a Element from the SCE-dependent model.
        Shape represents a Group or a Text Annotation that is depicted on the diagram. SCE-dependent models may add additional shapes
        to their diagrams. Shape has no additional properties but a SCE-dependent model may extend this class to add properties that are used to
        further specify the appearance of some shapes that cannot be deduced from the SCE-dependent model.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="di:tShape">
        <xs:sequence>
          <xs:element ref="scedi:label" minOccurs="0" maxOccurs="1">
            <!-- This element is added to Shape because the multiple
              inheritence of the UML metamodel is not supported in XSD. -->
            <xs:annotation>
              <xs:documentation>
                Element Role: label
                An optional label when the SCE-dependent Element has a visible text label.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="modelElement" type="xs:QName" use="optional">
          <!-- This attribute is added to Shape because the multiple
            inheritence of the UML metamodel is not supported in XSD.-->
          <xs:annotation>
            <xs:documentation>
              a reference to the Element represented by this Shape.
              This attribute SHOULD be set on all Shapes.
              It is only optional for backwards compatibility and for
              special situations where the Shape does not depict a model element.
          </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="edge" type="scedi:tEdge" substitutionGroup="scedi:diagramElement">
    <xs:annotation>
      <xs:documentation>
        The Edge class specializes DI::Edge and DiagramElement. It is a kind of Edge that can depict a relationship between two SCE-dependent
        model elements. Since Element might be
        depicted more than once, sourceElement and targetElement attributes allow to determine to which depiction a Edge is connected. When
        Edge has a source, its sourceModelElement MUST refer to the DiagramElement it starts from. That DiagramElement MUST resolved to
        the Element that is the actual source of the Requirement or Association. For Requirement, this is the required Element. When it has a target, its
        targetModelElement MUST refer to the DiagramElement where it ends. That DiagramElement MUST resolved to the Element that is the actual
        target of the Requirement or Association. For Requirement, this is the Element holding it.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="tEdge">
    <xs:complexContent>
      <xs:extension base="di:tEdge">
        <xs:sequence>
          <xs:element ref="scedi:label" minOccurs="0" maxOccurs="1">
            <!-- This element is added to Edge because the multiple
              inheritence of the UML metamodel is not supported in XSD. -->
            <xs:annotation>
              <xs:documentation>
                Element Role: label
                An optional label when the SCE-dependent Element has a visible text label.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="modelElement" type="xs:QName" use="optional">
          <!-- This attribute is added to Edge because the multiple
            inheritence of the UML metamodel is not supported in XSD.-->
          <xs:annotation>
            <xs:documentation>
              a reference to the Element represented by this Edge.
              This attribute SHOULD be set on all Edges.
              It is only optional for backwards compatibility and for
              special situations where the Edge does not depict a model element.
              Note that the sourceElement or targetElement attributes of Edge MUST ONLY
              be present if the Edge is depicted between a different source or target than the
              one referenced by the modelElement of the Edge.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="sourceElement" type="xs:QName" use="optional">
          <xs:annotation>
            <xs:documentation>
              an optional reference to the DiagramElement that this Edge starts from.
              This attribute MUST ONLY be present if the Edge is depicted starting from
              a different source than the one referenced by the modelElement of the Edge.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="targetElement" type="xs:QName" use="optional">
          <xs:annotation>
            <xs:documentation>
              an optional reference to the DiagramElement that this Edge ends at.
              This attribute MUST ONLY be present if the Edge is depicted ending at
              a different target than the one referenced by the modelElement of the Edge.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="label" type="scedi:tLabel"/>
  <xs:complexType name="tLabel">
    <xs:annotation>
      <xs:documentation>
        Label represents the depiction of some textual information about a  element. A Label
        is not a top-level element but is always nested inside either a Shape or a Edge. It
        does not have its own reference to a SCE element but rather inherits that reference from its
        parent Shape or DMNEdge. The textual information depicted by the label is derived from
        the name attribute of the referenced Element.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="di:tShape"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="style" type="scedi:tStyle" substitutionGroup="di:Style">
    <xs:annotation>
      <xs:documentation>
        Style specializes DC::Style. It is a kind of style that provides appearance options for a DiagramElement. Style is used to keep some
        non-normative visual attributes such as colors and font. SCE doesn’t give any semantic to color and font styling, but tools can decide to use them and
        interchange them. DiagramElement style is calculated by percolating up Style attributes defined at a different level of the hierarchy.
        Each attribute is considered independently (meaning that a Style attribute can be individually overloaded). The precedence rules are as follow:
        • The Style defined by the local Style attribute of the DiagramElement
        • The Style referenced by the sharedStyle attribute of the DiagramElement
        • The Style defined by the local Style attribute of the parent Diagram
        • The Style referenced by the sharedStyle attribute of the parent Diagram
        The default attribute value defined in Style attributes.
        For example, let’s say we have the following:
        • DiagramElement has a local Style that specifies the fillColor and strokeColor
        • Its parent Diagram defines a local Style that specifies the fillColor and fontColor
        Then the resulting DiagramElement should use:
        • The fillColor and strokeColor defined at the DiagramElement level (as they are defined
        locally).
        • The fontColor defined at the Diagram level (as the fillColor was overloaded locally).
        • All other Style attributes would have their default values.
      </xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="tStyle">
    <xs:complexContent>
      <xs:extension base="di:tStyle">
        <xs:sequence>
          <xs:element name="fillColor" type="dc:tColor" minOccurs="0" maxOccurs="1">
            <xs:annotation>
              <xs:documentation>
                The color use to fill the shape. Does not apply to Edge.
                The default is white.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="strokeColor" type="dc:tColor" minOccurs="0" maxOccurs="1">
            <xs:annotation>
              <xs:documentation>
                The color use to draw the shape borders. The default is black.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="fontColor" type="dc:tColor" minOccurs="0" maxOccurs="1">
            <xs:annotation>
              <xs:documentation>
                The color use to write the label. The default is black.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="fontStrikeThrough" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="fontUnderline" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="fontBold" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="fontItalic" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="fontSize" type="xs:double" use="optional" default="8"/>
        <xs:attribute name="fontFamily" type="xs:string" use="optional" default="Arial"/>
        <xs:attribute name="labelHorizontalAlignment" type="dc:tAlignmentKind" use="optional">
          <xs:annotation>
            <xs:documentation>
              How text should be positioned horizontally within the Label bounds. Default depends
              of the DiagramElement the label is attached to (see section below).
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="labelVerticalAlignment" type="dc:tAlignmentKind" use="optional">
          <xs:annotation>
            <xs:documentation>
              How the text should be positioned vertically inside the Label bounds. Default
              depends of the DiagramElement the label is attached to (see section below). Start
              means “top” and end means “bottom”.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
